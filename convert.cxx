// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "convert.h"

int main() {
  ConvertirUI ui;
  return Fl::run();
}

void ConvertirUI::cb_calcButton_i(Fl_Button*, void*) {
  convertir();
}
void ConvertirUI::cb_calcButton(Fl_Button* o, void* v) {
  ((ConvertirUI*)(o->parent()->user_data()))->cb_calcButton_i(o,v);
}

void ConvertirUI::cb_clearButton_i(Fl_Button*, void*) {
  limpiar();
}
void ConvertirUI::cb_clearButton(Fl_Button* o, void* v) {
  ((ConvertirUI*)(o->parent()->user_data()))->cb_clearButton_i(o,v);
}
#include <string>
#include <sstream>
#include <iomanip>

ConvertirUI::ConvertirUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(304, 169, "Convesor Hpa a InHg");
    w = o; if (w) {/* empty */}
    o->user_data((void*)(this));
    { inputHpa = new Fl_Input(94, 29, 115, 25);
      inputHpa->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Input* inputHpa
    { outputInHg = new Fl_Output(94, 59, 114, 25);
      outputInHg->textfont(1);
      outputInHg->textcolor((Fl_Color)4);
      outputInHg->align(Fl_Align(FL_ALIGN_RIGHT));
      outputInHg->deactivate();
    } // Fl_Output* outputInHg
    { calcButton = new Fl_Button(30, 110, 115, 25, "Calcular");
      calcButton->callback((Fl_Callback*)cb_calcButton);
    } // Fl_Button* calcButton
    { clearButton = new Fl_Button(155, 110, 115, 25, "Limpiar");
      clearButton->callback((Fl_Callback*)cb_clearButton);
    } // Fl_Button* clearButton
    { Fl_Box* o = new Fl_Box(52, 29, 25, 25, "Hpa");
      o->labelfont(1);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(55, 59, 25, 25, "InHg");
      o->labelfont(1);
    } // Fl_Box* o
    o->end();
  } // Fl_Double_Window* o
  w->show();
}

void ConvertirUI::limpiar() {
  inputHpa->value("");
  outputInHg->value("");
}

double ConvertirUI::hpaToInHg(const double &hpa, double &inHg) {
  const double conversionFactor = 0.02952998751;
  inHg = hpa * conversionFactor;
  return inHg;
}

void ConvertirUI::convertir() {
  std::string hpaStr = inputHpa->value();
  double hpa, inHg;
  
  try {
      hpa = std::stod(hpaStr);
      hpaToInHg(hpa, inHg);
      
      std::stringstream ss;
      ss << std::fixed << std::setprecision(2) << inHg;
      outputInHg->value(ss.str().c_str());
  } catch (const std::exception& e) {
      outputInHg->value("Error");
  }
}
